// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`DiagnosticsProvider > $$Props-invalid-alias/$$Props-invalid-alias1 1`] = `
[
  {
    "code": 7043,
    "message": "Variable 'x' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 13,
        "line": 9,
      },
      "start": {
        "character": 12,
        "line": 9,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'ItemData' is not assignable to parameter of type '{ x: any; y: string; }'.
  Types of property 'y' are incompatible.
    Type 'number' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 13,
        "line": 6,
      },
      "start": {
        "character": 6,
        "line": 6,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$Props-invalid-alias/$$Props-invalid-alias2 1`] = `
[
  {
    "code": 7043,
    "message": "Variable 'x' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 13,
        "line": 9,
      },
      "start": {
        "character": 12,
        "line": 9,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'ItemData' is not assignable to parameter of type '{ x: any; y: string; }'.
  Types of property 'y' are incompatible.
    Type 'number' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 13,
        "line": 6,
      },
      "start": {
        "character": 6,
        "line": 6,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$Props-invalid-alias/$$Props-invalid-alias3 1`] = `
[
  {
    "code": 7043,
    "message": "Variable 'x' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 13,
        "line": 10,
      },
      "start": {
        "character": 12,
        "line": 10,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'ItemData' is not assignable to parameter of type '{ x: any; y: string; }'.
  Types of property 'y' are incompatible.
    Type 'number' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 13,
        "line": 8,
      },
      "start": {
        "character": 6,
        "line": 8,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$Props-invalid-alias/$$Props-invalid-alias4 1`] = `
[
  {
    "code": 7043,
    "message": "Variable 'x' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 13,
        "line": 10,
      },
      "start": {
        "character": 12,
        "line": 10,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'ItemData' is not assignable to parameter of type '{ x: any; y: string; }'.
  Types of property 'y' are incompatible.
    Type 'number' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 13,
        "line": 8,
      },
      "start": {
        "character": 6,
        "line": 8,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$Props-invalid-alias/$$Props-invalid-alias5 1`] = `
[
  {
    "code": 7043,
    "message": "Variable 'x' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 13,
        "line": 5,
      },
      "start": {
        "character": 12,
        "line": 5,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'ItemData' is not assignable to parameter of type '{ x: any; y: string; }'.
  Types of property 'y' are incompatible.
    Type 'number' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 13,
        "line": 3,
      },
      "start": {
        "character": 6,
        "line": 3,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$Props-invalid-alias/$$Props-invalid-alias6 1`] = `
[
  {
    "code": 7043,
    "message": "Variable 'x' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 13,
        "line": 5,
      },
      "start": {
        "character": 12,
        "line": 5,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'ItemData' is not assignable to parameter of type '{ x: any; y: string; }'.
  Types of property 'y' are incompatible.
    Type 'number' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 13,
        "line": 3,
      },
      "start": {
        "character": 6,
        "line": 3,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$Props-invalid-alias/$$Props-invalid-alias7 1`] = `
[
  {
    "code": 7043,
    "message": "Variable 'x' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 13,
        "line": 11,
      },
      "start": {
        "character": 12,
        "line": 11,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'ItemData2' is not assignable to parameter of type '{ x: any; y: string; }'.
  Types of property 'y' are incompatible.
    Type 'number' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 13,
        "line": 8,
      },
      "start": {
        "character": 6,
        "line": 8,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$events 1`] = `
[
  {
    "code": 2345,
    "message": "Argument of type 'boolean' is not assignable to parameter of type 'string'.",
    "range": {
      "end": {
        "character": 24,
        "line": 12,
      },
      "start": {
        "character": 20,
        "line": 12,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type '"click"' is not assignable to parameter of type '"foo"'.",
    "range": {
      "end": {
        "character": 20,
        "line": 13,
      },
      "start": {
        "character": 13,
        "line": 13,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$events-usage 1`] = `
[
  {
    "code": 2345,
    "message": "Argument of type '"bar"' is not assignable to parameter of type 'keyof $$Events'.",
    "range": {
      "end": {
        "character": 14,
        "line": 7,
      },
      "start": {
        "character": 11,
        "line": 7,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 54,
        "line": 7,
      },
      "start": {
        "character": 37,
        "line": 7,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$generic-filter-out-unused 1`] = `[]`;

exports[`DiagnosticsProvider > $$props 1`] = `[]`;

exports[`DiagnosticsProvider > $$props-invalid1 1`] = `
[
  {
    "code": 2345,
    "message": "Argument of type '$$Props' is not assignable to parameter of type '{ exported1: string; }'.
  Property 'exported1' is optional in type '$$Props' but required in type '{ exported1: string; }'.",
    "range": {
      "end": {
        "character": 18,
        "line": 1,
      },
      "start": {
        "character": 11,
        "line": 1,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$props-invalid2 1`] = `
[
  {
    "code": 2345,
    "message": "Argument of type '$$Props' is not assignable to parameter of type '{ exported1?: string; }'.
  Types of property 'exported1' are incompatible.
    Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 18,
        "line": 1,
      },
      "start": {
        "character": 11,
        "line": 1,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$props-invalid3 1`] = `
[
  {
    "code": 2345,
    "message": "Argument of type '$$Props' is not assignable to parameter of type '{ wrong: boolean; }'.
  Property 'wrong' is missing in type '$$Props' but required in type '{ wrong: boolean; }'.",
    "range": {
      "end": {
        "character": 18,
        "line": 1,
      },
      "start": {
        "character": 11,
        "line": 1,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$props-usage 1`] = `
[
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 16,
        "line": 10,
      },
      "start": {
        "character": 7,
        "line": 10,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"invalidProp"' does not exist in type '$$Props'.",
    "range": {
      "end": {
        "character": 54,
        "line": 11,
      },
      "start": {
        "character": 43,
        "line": 11,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2739,
    "message": "Type '{}' is missing the following properties from type '$$Props': exported1, exported3",
    "range": {
      "end": {
        "character": 6,
        "line": 12,
      },
      "start": {
        "character": 1,
        "line": 12,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$props-valid 1`] = `[]`;

exports[`DiagnosticsProvider > $$props-valid2 1`] = `[]`;

exports[`DiagnosticsProvider > $$slots 1`] = `
[
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 39,
        "line": 13,
      },
      "start": {
        "character": 20,
        "line": 13,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"invalidProp1"' does not exist in type '{ valid1: boolean; validPropWrongType1: string; }'.",
    "range": {
      "end": {
        "character": 32,
        "line": 14,
      },
      "start": {
        "character": 20,
        "line": 14,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 50,
        "line": 15,
      },
      "start": {
        "character": 31,
        "line": 15,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"invalidProp2"' does not exist in type '{ valid2: boolean; validPropWrongType2: string; }'.",
    "range": {
      "end": {
        "character": 43,
        "line": 16,
      },
      "start": {
        "character": 31,
        "line": 16,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type '"invalid"' is not assignable to parameter of type 'keyof $$Slots'.",
    "range": {
      "end": {
        "character": 19,
        "line": 17,
      },
      "start": {
        "character": 12,
        "line": 17,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $$slots-usage 1`] = `
[
  {
    "code": 2339,
    "message": "Property 'invalidProp1' does not exist on type '{ valid1: boolean; validPropWrongType1: string; }'.",
    "range": {
      "end": {
        "character": 58,
        "line": 4,
      },
      "start": {
        "character": 46,
        "line": 4,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 33,
        "line": 6,
      },
      "start": {
        "character": 5,
        "line": 6,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2339,
    "message": "Property 'invalidProp2' does not exist on type '{ valid2: boolean; validPropWrongType2: string; }'.",
    "range": {
      "end": {
        "character": 71,
        "line": 8,
      },
      "start": {
        "character": 59,
        "line": 8,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 37,
        "line": 10,
      },
      "start": {
        "character": 9,
        "line": 10,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $store-bind 1`] = `
[
  {
    "code": 2322,
    "message": "Type 'number' is not assignable to type 'boolean'.",
    "range": {
      "end": {
        "character": 34,
        "line": 17,
      },
      "start": {
        "character": 24,
        "line": 17,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'number'.",
    "range": {
      "end": {
        "character": 20,
        "line": 18,
      },
      "start": {
        "character": 16,
        "line": 18,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'number' is not assignable to type 'boolean'.",
    "range": {
      "end": {
        "character": 41,
        "line": 19,
      },
      "start": {
        "character": 24,
        "line": 19,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'number'.",
    "range": {
      "end": {
        "character": 20,
        "line": 20,
      },
      "start": {
        "character": 16,
        "line": 20,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $store-control-flow 1`] = `
[
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 57,
        "line": 15,
      },
      "start": {
        "character": 40,
        "line": 15,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'string' is not assignable to type 'boolean'.",
    "range": {
      "end": {
        "character": 16,
        "line": 21,
      },
      "start": {
        "character": 12,
        "line": 21,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 69,
        "line": 28,
      },
      "start": {
        "character": 46,
        "line": 28,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 58,
        "line": 35,
      },
      "start": {
        "character": 41,
        "line": 35,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'string' is not assignable to type 'boolean'.",
    "range": {
      "end": {
        "character": 17,
        "line": 40,
      },
      "start": {
        "character": 13,
        "line": 40,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 70,
        "line": 47,
      },
      "start": {
        "character": 47,
        "line": 47,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $store-undefined 1`] = `
[
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'number' and 'string' have no overlap.",
    "range": {
      "end": {
        "character": 64,
        "line": 9,
      },
      "start": {
        "character": 36,
        "line": 9,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > $store-uninitialized 1`] = `[]`;

exports[`DiagnosticsProvider > $store-wrong-usage 1`] = `
[
  {
    "code": 2769,
    "message": "Cannot use 'noStoreModule' as a store. 'noStoreModule' needs to be an object with a subscribe method on it.

No overload matches this call.
  Overload 1 of 2, '(store: SvelteStore<any>): any', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'SvelteStore<any>'.
  Overload 2 of 2, '(store: SvelteStore<any>): any', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'SvelteStore<any>'.",
    "range": {
      "end": {
        "character": 14,
        "line": 8,
      },
      "start": {
        "character": 0,
        "line": 8,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2769,
    "message": "Cannot use 'noStoreModule' as a store. 'noStoreModule' needs to be an object with a subscribe method on it.

No overload matches this call.
  Overload 1 of 2, '(store: SvelteStore<any>): any', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'SvelteStore<any>'.
  Overload 2 of 2, '(store: SvelteStore<any>): any', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'SvelteStore<any>'.",
    "range": {
      "end": {
        "character": 15,
        "line": 15,
      },
      "start": {
        "character": 1,
        "line": 15,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2769,
    "message": "Cannot use 'store' as a store. 'store' needs to be an object with a subscribe method on it.

No overload matches this call.
  Overload 1 of 2, '(store: SvelteStore<any>): any', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'SvelteStore<any>'.
  Overload 2 of 2, '(store: SvelteStore<any>): any', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'SvelteStore<any>'.",
    "range": {
      "end": {
        "character": 6,
        "line": 6,
      },
      "start": {
        "character": 0,
        "line": 6,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2769,
    "message": "Cannot use 'store' as a store. 'store' needs to be an object with a subscribe method on it.

No overload matches this call.
  Overload 1 of 2, '(store: SvelteStore<any>): any', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'SvelteStore<any>'.
  Overload 2 of 2, '(store: SvelteStore<any>): any', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'SvelteStore<any>'.",
    "range": {
      "end": {
        "character": 9,
        "line": 7,
      },
      "start": {
        "character": 3,
        "line": 7,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2769,
    "message": "Cannot use 'store' as a store. 'store' needs to be an object with a subscribe method on it.

No overload matches this call.
  Overload 1 of 2, '(store: SvelteStore<any>): any', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'SvelteStore<any>'.
  Overload 2 of 2, '(store: SvelteStore<any>): any', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'SvelteStore<any>'.",
    "range": {
      "end": {
        "character": 7,
        "line": 11,
      },
      "start": {
        "character": 1,
        "line": 11,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2769,
    "message": "Cannot use 'store' as a store. 'store' needs to be an object with a subscribe method on it.

No overload matches this call.
  Overload 1 of 2, '(store: SvelteStore<any>): any', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'SvelteStore<any>'.
  Overload 2 of 2, '(store: SvelteStore<any>): any', gave the following error.
    Argument of type 'string' is not assignable to parameter of type 'SvelteStore<any>'.",
    "range": {
      "end": {
        "character": 11,
        "line": 12,
      },
      "start": {
        "character": 5,
        "line": 12,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > accessors-customElement-configs 1`] = `[]`;

exports[`DiagnosticsProvider > actions-animations-transitions-typechecks 1`] = `
[
  {
    "code": 2345,
    "message": "Argument of type 'HTMLDivElement' is not assignable to parameter of type 'SVGElement & { getTotalLength(): number; }'.
  Type 'HTMLDivElement' is missing the following properties from type 'SVGElement': ownerSVGElement, viewportElement",
    "range": {
      "end": {
        "character": 19,
        "line": 9,
      },
      "start": {
        "character": 19,
        "line": 9,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'HTMLParagraphElement' is not assignable to parameter of type 'HTMLInputElement'.
  Type 'HTMLParagraphElement' is missing the following properties from type 'HTMLInputElement': accept, alt, autocomplete, capture, and 54 more.",
    "range": {
      "end": {
        "character": 12,
        "line": 14,
      },
      "start": {
        "character": 12,
        "line": 14,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > actions-enhance-types 1`] = `
[
  {
    "code": 2322,
    "message": "Type 'number' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 19,
        "line": 25,
      },
      "start": {
        "character": 16,
        "line": 25,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type '(e: CustomEvent<string>) => void' is not assignable to type '(e: CustomEvent<boolean>) => void'.
  Types of parameters 'e' and 'e' are incompatible.
    Type 'CustomEvent<boolean>' is not assignable to type 'CustomEvent<string>'.
      Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 34,
        "line": 26,
      },
      "start": {
        "character": 31,
        "line": 26,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > bind-this 1`] = `
[
  {
    "code": 6133,
    "message": "'element' is declared but its value is never read.",
    "range": {
      "end": {
        "character": 13,
        "line": 9,
      },
      "start": {
        "character": 6,
        "line": 9,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [
      1,
    ],
  },
  {
    "code": 2740,
    "message": "Type 'HTMLDivElement' is missing the following properties from type 'HTMLInputElement': accept, alt, autocomplete, capture, and 54 more.",
    "range": {
      "end": {
        "character": 23,
        "line": 40,
      },
      "start": {
        "character": 16,
        "line": 40,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'Component' is not assignable to type 'OtherComponent'.
  Type '{ prop: boolean; }' is not assignable to type '{ prop: string; }'.
    Types of property 'prop' are incompatible.
      Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 48,
        "line": 41,
      },
      "start": {
        "character": 34,
        "line": 41,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'ComponentWithFunction1' is not assignable to type 'ComponentWithFunction2'.
  Types of property 'action' are incompatible.
    Type '(a: number) => string | number' is not assignable to type '() => string'.
      Target signature provides too few arguments. Expected 1 or more, but got 0.",
    "range": {
      "end": {
        "character": 57,
        "line": 42,
      },
      "start": {
        "character": 35,
        "line": 42,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2741,
    "message": "Property 'prop' is missing in type '{}' but required in type '{ prop: boolean; }'.",
    "range": {
      "end": {
        "character": 17,
        "line": 43,
      },
      "start": {
        "character": 1,
        "line": 43,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'Component' is not assignable to type 'OtherComponent'.
  Type '{ prop: boolean; }' is not assignable to type '{ prop: string; }'.
    Types of property 'prop' are incompatible.
      Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 60,
        "line": 43,
      },
      "start": {
        "character": 46,
        "line": 43,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'ComponentWithGeneric<boolean>' is not assignable to type 'ComponentWithGeneric<string>'.
  Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 65,
        "line": 46,
      },
      "start": {
        "character": 45,
        "line": 46,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2741,
    "message": "Property 'prop' is missing in type '{}' but required in type '{ prop: boolean; }'.",
    "range": {
      "end": {
        "character": 17,
        "line": 47,
      },
      "start": {
        "character": 1,
        "line": 47,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > bind-union 1`] = `[]`;

exports[`DiagnosticsProvider > bindings 1`] = `
[
  {
    "code": 2344,
    "message": "Type 'typeof Runes__SvelteComponent_' does not satisfy the constraint '(...args: any) => any'.
  Type 'typeof Runes__SvelteComponent_' provides no match for the signature '(...args: any): any'.",
    "range": {
      "end": {
        "character": 41,
        "line": 12,
      },
      "start": {
        "character": 29,
        "line": 12,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and 'can_bind' does not exist in type '{ only_bind?: () => boolean; }'.",
    "range": {
      "end": {
        "character": 20,
        "line": 21,
      },
      "start": {
        "character": 12,
        "line": 21,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and 'can_bind' does not exist in type '{ only_bind?: () => boolean; }'.",
    "range": {
      "end": {
        "character": 16,
        "line": 22,
      },
      "start": {
        "character": 8,
        "line": 22,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and 'readonly' does not exist in type '{ only_bind?: () => boolean; }'.",
    "range": {
      "end": {
        "character": 16,
        "line": 23,
      },
      "start": {
        "character": 8,
        "line": 23,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and 'readonly' does not exist in type '{ only_bind?: () => boolean; }'.",
    "range": {
      "end": {
        "character": 20,
        "line": 26,
      },
      "start": {
        "character": 12,
        "line": 26,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and 'readonly' does not exist in type '{ only_bind?: () => boolean; }'.",
    "range": {
      "end": {
        "character": 27,
        "line": 30,
      },
      "start": {
        "character": 19,
        "line": 30,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > boolean-literal-props 1`] = `[]`;

exports[`DiagnosticsProvider > checkjs/component-props-js 1`] = `[]`;

exports[`DiagnosticsProvider > checkjs/component-props-ts 1`] = `
[
  {
    "code": 2741,
    "message": "Property 'required' is missing in type '{}' but required in type '{ required: string; optional1?: string; optional2?: string; }'.",
    "range": {
      "end": {
        "character": 9,
        "line": 6,
      },
      "start": {
        "character": 1,
        "line": 6,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"doesntExist"' does not exist in type '{ required: string; optional1?: string; optional2?: string; }'.",
    "range": {
      "end": {
        "character": 68,
        "line": 8,
      },
      "start": {
        "character": 57,
        "line": 8,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 18,
        "line": 9,
      },
      "start": {
        "character": 10,
        "line": 9,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 35,
        "line": 9,
      },
      "start": {
        "character": 26,
        "line": 9,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 52,
        "line": 9,
      },
      "start": {
        "character": 43,
        "line": 9,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2741,
    "message": "Property 'required' is missing in type '{}' but required in type '{ required: string; optional1?: string; optional2?: string; }'.",
    "range": {
      "end": {
        "character": 9,
        "line": 10,
      },
      "start": {
        "character": 1,
        "line": 10,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 18,
        "line": 12,
      },
      "start": {
        "character": 10,
        "line": 12,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 35,
        "line": 12,
      },
      "start": {
        "character": 26,
        "line": 12,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 52,
        "line": 12,
      },
      "start": {
        "character": 43,
        "line": 12,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > checkjs/no-script-tag 1`] = `[]`;

exports[`DiagnosticsProvider > checkjs-nostrict/component-props-js 1`] = `[]`;

exports[`DiagnosticsProvider > checkjs-nostrict/component-props-ts 1`] = `
[
  {
    "code": 2741,
    "message": "Property 'required' is missing in type '{}' but required in type '{ required: string; optional1?: string; optional2?: string; }'.",
    "range": {
      "end": {
        "character": 9,
        "line": 6,
      },
      "start": {
        "character": 1,
        "line": 6,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"doesntExist"' does not exist in type '{ required: string; optional1?: string; optional2?: string; }'.",
    "range": {
      "end": {
        "character": 68,
        "line": 8,
      },
      "start": {
        "character": 57,
        "line": 8,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 18,
        "line": 9,
      },
      "start": {
        "character": 10,
        "line": 9,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 35,
        "line": 9,
      },
      "start": {
        "character": 26,
        "line": 9,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 52,
        "line": 9,
      },
      "start": {
        "character": 43,
        "line": 9,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2741,
    "message": "Property 'required' is missing in type '{}' but required in type '{ required: string; optional1?: string; optional2?: string; }'.",
    "range": {
      "end": {
        "character": 9,
        "line": 10,
      },
      "start": {
        "character": 1,
        "line": 10,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 18,
        "line": 12,
      },
      "start": {
        "character": 10,
        "line": 12,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 35,
        "line": 12,
      },
      "start": {
        "character": 26,
        "line": 12,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 52,
        "line": 12,
      },
      "start": {
        "character": 43,
        "line": 12,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > checkjs-nostrict/each-anytype 1`] = `[]`;

exports[`DiagnosticsProvider > coffeescript-ignore 1`] = `[]`;

exports[`DiagnosticsProvider > component-invalid 1`] = `
[
  {
    "code": 2345,
    "message": "Argument of type 'typeof DoesntWork' is not assignable to parameter of type 'ConstructorOfATypedSvelteComponent'.
  Type 'DoesntWork' is missing the following properties from type 'ATypedSvelteComponent': $$prop_def, $$events_def, $$slot_def, $on

Possible causes:
- You use the instance type of a component where you should use the constructor type
- Type definitions are missing for this Svelte Component. If you are using Svelte 3.31+, use SvelteComponentTyped to add a definition:
  import type { SvelteComponentTyped } from "svelte";
  class ComponentName extends SvelteComponentTyped<{propertyName: string;}> {}",
    "range": {
      "end": {
        "character": 11,
        "line": 19,
      },
      "start": {
        "character": 1,
        "line": 19,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'true' is not assignable to type 'never'.",
    "range": {
      "end": {
        "character": 25,
        "line": 20,
      },
      "start": {
        "character": 10,
        "line": 20,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'typeof DoesntWork' is not assignable to parameter of type 'ConstructorOfATypedSvelteComponent'.
  Type 'DoesntWork' is missing the following properties from type 'ATypedSvelteComponent': $$prop_def, $$events_def, $$slot_def, $on

Possible causes:
- You use the instance type of a component where you should use the constructor type
- Type definitions are missing for this Svelte Component. If you are using Svelte 3.31+, use SvelteComponentTyped to add a definition:
  import type { SvelteComponentTyped } from "svelte";
  class ComponentName extends SvelteComponentTyped<{propertyName: string;}> {}",
    "range": {
      "end": {
        "character": 34,
        "line": 21,
      },
      "start": {
        "character": 24,
        "line": 21,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'typeof DoesntWork' is not assignable to parameter of type 'ConstructorOfATypedSvelteComponent'.
  Type 'DoesntWork' is missing the following properties from type 'ATypedSvelteComponent': $$prop_def, $$events_def, $$slot_def, $on

Possible causes:
- You use the instance type of a component where you should use the constructor type
- Type definitions are missing for this Svelte Component. If you are using Svelte 3.31+, use SvelteComponentTyped to add a definition:
  import type { SvelteComponentTyped } from "svelte";
  class ComponentName extends SvelteComponentTyped<{propertyName: string;}> {}",
    "range": {
      "end": {
        "character": 11,
        "line": 24,
      },
      "start": {
        "character": 1,
        "line": 24,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'typeof DoesntWork' is not assignable to parameter of type 'ConstructorOfATypedSvelteComponent'.
  Type 'DoesntWork' is missing the following properties from type 'ATypedSvelteComponent': $$prop_def, $$events_def, $$slot_def, $on

Possible causes:
- You use the instance type of a component where you should use the constructor type
- Type definitions are missing for this Svelte Component. If you are using Svelte 3.31+, use SvelteComponentTyped to add a definition:
  import type { SvelteComponentTyped } from "svelte";
  class ComponentName extends SvelteComponentTyped<{propertyName: string;}> {}",
    "range": {
      "end": {
        "character": 34,
        "line": 27,
      },
      "start": {
        "character": 24,
        "line": 27,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > const-tag 1`] = `
[
  {
    "code": 6133,
    "message": "'result' is declared but its value is never read.",
    "range": {
      "end": {
        "character": 27,
        "line": 28,
      },
      "start": {
        "character": 21,
        "line": 28,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [
      1,
    ],
  },
  {
    "code": 6133,
    "message": "'unused' is declared but its value is never read.",
    "range": {
      "end": {
        "character": 18,
        "line": 29,
      },
      "start": {
        "character": 12,
        "line": 29,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [
      1,
    ],
  },
  {
    "code": 6133,
    "message": "'e' is declared but its value is never read.",
    "range": {
      "end": {
        "character": 9,
        "line": 32,
      },
      "start": {
        "character": 8,
        "line": 32,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [
      1,
    ],
  },
  {
    "code": 6133,
    "message": "'unused' is declared but its value is never read.",
    "range": {
      "end": {
        "character": 18,
        "line": 33,
      },
      "start": {
        "character": 12,
        "line": 33,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [
      1,
    ],
  },
  {
    "code": 6133,
    "message": "'unused' is declared but its value is never read.",
    "range": {
      "end": {
        "character": 18,
        "line": 39,
      },
      "start": {
        "character": 12,
        "line": 39,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [
      1,
    ],
  },
  {
    "code": 2304,
    "message": "Cannot find name 'doesntExist'.",
    "range": {
      "end": {
        "character": 32,
        "line": 29,
      },
      "start": {
        "character": 21,
        "line": 29,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 17,
        "line": 31,
      },
      "start": {
        "character": 5,
        "line": 31,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2304,
    "message": "Cannot find name 'doesntExist'.",
    "range": {
      "end": {
        "character": 32,
        "line": 33,
      },
      "start": {
        "character": 21,
        "line": 33,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 17,
        "line": 35,
      },
      "start": {
        "character": 5,
        "line": 35,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2304,
    "message": "Cannot find name 'doesntExist'.",
    "range": {
      "end": {
        "character": 32,
        "line": 39,
      },
      "start": {
        "character": 21,
        "line": 39,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'number' and 'string' have no overlap.",
    "range": {
      "end": {
        "character": 16,
        "line": 41,
      },
      "start": {
        "character": 5,
        "line": 41,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > const-tag-if 1`] = `
[
  {
    "code": 2551,
    "message": "Property 'toFixed' does not exist on type 'string'. Did you mean 'fixed'?",
    "range": {
      "end": {
        "character": 26,
        "line": 25,
      },
      "start": {
        "character": 19,
        "line": 25,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2551,
    "message": "Property 'toFixed' does not exist on type 'string'. Did you mean 'fixed'?",
    "range": {
      "end": {
        "character": 47,
        "line": 25,
      },
      "start": {
        "character": 40,
        "line": 25,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2339,
    "message": "Property 'substring' does not exist on type 'number'.",
    "range": {
      "end": {
        "character": 20,
        "line": 27,
      },
      "start": {
        "character": 11,
        "line": 27,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2339,
    "message": "Property 'toFixed' does not exist on type 'boolean'.",
    "range": {
      "end": {
        "character": 18,
        "line": 29,
      },
      "start": {
        "character": 11,
        "line": 29,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > custom-types 1`] = `
[
  {
    "code": 7044,
    "message": "Parameter 'e' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 27,
        "line": 4,
      },
      "start": {
        "character": 26,
        "line": 4,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 7044,
    "message": "Parameter 'e' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 20,
        "line": 12,
      },
      "start": {
        "character": 19,
        "line": 12,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 7044,
    "message": "Parameter 'e' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 20,
        "line": 21,
      },
      "start": {
        "character": 19,
        "line": 21,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 7044,
    "message": "Parameter 'e' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 27,
        "line": 22,
      },
      "start": {
        "character": 26,
        "line": 22,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"owntypefromold"' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 19,
        "line": 3,
      },
      "start": {
        "character": 5,
        "line": 3,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"on:ownclickfromold"' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 23,
        "line": 4,
      },
      "start": {
        "character": 8,
        "line": 4,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"owntype"' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 12,
        "line": 11,
      },
      "start": {
        "character": 5,
        "line": 11,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"on:ownclick"' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 16,
        "line": 12,
      },
      "start": {
        "character": 8,
        "line": 12,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"owntype"' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 12,
        "line": 19,
      },
      "start": {
        "character": 5,
        "line": 19,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"owntypefromold"' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 19,
        "line": 20,
      },
      "start": {
        "character": 5,
        "line": 20,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"on:ownclick"' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 16,
        "line": 21,
      },
      "start": {
        "character": 8,
        "line": 21,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"on:ownclickfromold"' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 23,
        "line": 22,
      },
      "start": {
        "character": 8,
        "line": 22,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > deprecated-unused-hints 1`] = `
[
  {
    "code": 7043,
    "message": "Variable 'a' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 9,
        "line": 2,
      },
      "start": {
        "character": 8,
        "line": 2,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 6385,
    "message": "'a' is deprecated.",
    "range": {
      "end": {
        "character": 5,
        "line": 3,
      },
      "start": {
        "character": 4,
        "line": 3,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [
      2,
    ],
  },
  {
    "code": 7043,
    "message": "Variable 'c' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 9,
        "line": 4,
      },
      "start": {
        "character": 8,
        "line": 4,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 6133,
    "message": "'c' is declared but its value is never read.",
    "range": {
      "end": {
        "character": 9,
        "line": 4,
      },
      "start": {
        "character": 8,
        "line": 4,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [
      1,
    ],
  },
]
`;

exports[`DiagnosticsProvider > each 1`] = `
[
  {
    "code": 2345,
    "message": "Argument of type '{}' is not assignable to parameter of type 'ArrayLike<unknown> | Iterable<unknown>'.",
    "range": {
      "end": {
        "character": 24,
        "line": 29,
      },
      "start": {
        "character": 7,
        "line": 29,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'number' is not assignable to parameter of type 'ArrayLike<unknown> | Iterable<unknown>'.",
    "range": {
      "end": {
        "character": 24,
        "line": 33,
      },
      "start": {
        "character": 7,
        "line": 33,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > element-attributes 1`] = `
[
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"this-is"' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 12,
        "line": 9,
      },
      "start": {
        "character": 5,
        "line": 9,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and 'bar' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 9,
        "line": 10,
      },
      "start": {
        "character": 6,
        "line": 10,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > element-events 1`] = `
[
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"on:wat"' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 11,
        "line": 10,
      },
      "start": {
        "character": 8,
        "line": 10,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2339,
    "message": "Property 'asd' does not exist on type 'MouseEvent & { currentTarget: EventTarget & HTMLDivElement; }'.",
    "range": {
      "end": {
        "character": 25,
        "line": 11,
      },
      "start": {
        "character": 22,
        "line": 11,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > exports-map-svelte 1`] = `
[
  {
    "code": 2307,
    "message": "Cannot find module 'package' or its corresponding type declarations.",
    "range": {
      "end": {
        "character": 45,
        "line": 1,
      },
      "start": {
        "character": 36,
        "line": 1,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2307,
    "message": "Cannot find module 'package/x' or its corresponding type declarations.",
    "range": {
      "end": {
        "character": 38,
        "line": 2,
      },
      "start": {
        "character": 27,
        "line": 2,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2307,
    "message": "Cannot find module 'package/y' or its corresponding type declarations.",
    "range": {
      "end": {
        "character": 49,
        "line": 3,
      },
      "start": {
        "character": 38,
        "line": 3,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > generics 1`] = `
[
  {
    "code": 2322,
    "message": "Type '"asd"' is not assignable to type '"b" | "a"'.",
    "range": {
      "end": {
        "character": 28,
        "line": 10,
      },
      "start": {
        "character": 27,
        "line": 10,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'string' is not assignable to type 'boolean'.",
    "range": {
      "end": {
        "character": 38,
        "line": 10,
      },
      "start": {
        "character": 37,
        "line": 10,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types '{ a: number; b: number; }' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 74,
        "line": 10,
      },
      "start": {
        "character": 57,
        "line": 10,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types '{ a: number; b: number; }' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 13,
        "line": 11,
      },
      "start": {
        "character": 3,
        "line": 11,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types '"anchor"' and '"big"' have no overlap.",
    "range": {
      "end": {
        "character": 16,
        "line": 15,
      },
      "start": {
        "character": 5,
        "line": 15,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > getters 1`] = `
[
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'boolean' and 'string' have no overlap.",
    "range": {
      "end": {
        "character": 22,
        "line": 5,
      },
      "start": {
        "character": 4,
        "line": 5,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > if-control-flow 1`] = `
[
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 15,
        "line": 14,
      },
      "start": {
        "character": 5,
        "line": 14,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 19,
        "line": 17,
      },
      "start": {
        "character": 9,
        "line": 17,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 19,
        "line": 21,
      },
      "start": {
        "character": 9,
        "line": 21,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types '{ a: string | boolean; }' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 19,
        "line": 32,
      },
      "start": {
        "character": 9,
        "line": 32,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'boolean' and 'string' have no overlap.",
    "range": {
      "end": {
        "character": 26,
        "line": 36,
      },
      "start": {
        "character": 17,
        "line": 36,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 25,
        "line": 45,
      },
      "start": {
        "character": 13,
        "line": 45,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'string | boolean' is not assignable to type 'string'.
  Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 8,
        "line": 54,
      },
      "start": {
        "character": 1,
        "line": 54,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > if-control-flow-shadowed-variables 1`] = `
[
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 15,
        "line": 13,
      },
      "start": {
        "character": 5,
        "line": 13,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 16,
        "line": 17,
      },
      "start": {
        "character": 9,
        "line": 17,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2339,
    "message": "Property 'a' does not exist on type 'boolean'.",
    "range": {
      "end": {
        "character": 16,
        "line": 23,
      },
      "start": {
        "character": 15,
        "line": 23,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types '{ a: string | boolean; }' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 19,
        "line": 27,
      },
      "start": {
        "character": 9,
        "line": 27,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2339,
    "message": "Property 'a' does not exist on type 'string | boolean'.
  Property 'a' does not exist on type 'string'.",
    "range": {
      "end": {
        "character": 16,
        "line": 29,
      },
      "start": {
        "character": 15,
        "line": 29,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'string' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 24,
        "line": 31,
      },
      "start": {
        "character": 17,
        "line": 31,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > ignore-false-positives 1`] = `[]`;

exports[`DiagnosticsProvider > ignore-generated-code 1`] = `
[
  {
    "code": 2304,
    "message": "Cannot find name 'a'.",
    "range": {
      "end": {
        "character": 13,
        "line": 4,
      },
      "start": {
        "character": 12,
        "line": 4,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2304,
    "message": "Cannot find name 'a'.",
    "range": {
      "end": {
        "character": 6,
        "line": 5,
      },
      "start": {
        "character": 5,
        "line": 5,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2304,
    "message": "Cannot find name 'b'.",
    "range": {
      "end": {
        "character": 10,
        "line": 9,
      },
      "start": {
        "character": 9,
        "line": 9,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2304,
    "message": "Cannot find name 'b'.",
    "range": {
      "end": {
        "character": 10,
        "line": 10,
      },
      "start": {
        "character": 9,
        "line": 10,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2820,
    "message": "Type '"food"' is not assignable to type '"foo" | "bar"'. Did you mean '"foo"'?",
    "range": {
      "end": {
        "character": 9,
        "line": 15,
      },
      "start": {
        "character": 2,
        "line": 15,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > import-precedence 1`] = `
[
  {
    "code": 6263,
    "message": "Module './c.svelte' was resolved to '/Users/aewing/Projects/phx.digital/language-tools/packages/language-server/test/plugins/typescript/features/diagnostics/fixtures/import-precedence/c.d.svelte.ts', but '--allowArbitraryExtensions' is not set.",
    "range": {
      "end": {
        "character": 34,
        "line": 4,
      },
      "start": {
        "character": 22,
        "line": 4,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > invalid-import 1`] = `
[
  {
    "code": 2307,
    "message": "Cannot find module './doesnt-exist.svelte' or its corresponding type declarations.",
    "range": {
      "end": {
        "character": 51,
        "line": 1,
      },
      "start": {
        "character": 28,
        "line": 1,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > js-untyped 1`] = `[]`;

exports[`DiagnosticsProvider > modulescript-boolean-not-assignable-to-string 1`] = `
[
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 44,
        "line": 0,
      },
      "start": {
        "character": 41,
        "line": 0,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > no-typechecks-for-js 1`] = `[]`;

exports[`DiagnosticsProvider > node16 1`] = `[]`;

exports[`DiagnosticsProvider > parser-error 1`] = `
[
  {
    "code": -1,
    "message": "You can only have one top-level <style> tag per component",
    "range": {
      "end": {
        "character": 0,
        "line": 1,
      },
      "start": {
        "character": 0,
        "line": 1,
      },
    },
    "severity": 1,
    "source": "js",
  },
]
`;

exports[`DiagnosticsProvider > project-reference/nested 1`] = `
[
  {
    "code": 7044,
    "message": "Parameter 'num' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 11,
        "line": 3,
      },
      "start": {
        "character": 8,
        "line": 3,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2307,
    "message": "Cannot find module 'hi2' or its corresponding type declarations.",
    "range": {
      "end": {
        "character": 28,
        "line": 1,
      },
      "start": {
        "character": 23,
        "line": 1,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'string' is not assignable to type 'number'.",
    "range": {
      "end": {
        "character": 9,
        "line": 6,
      },
      "start": {
        "character": 8,
        "line": 6,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > project-reference/paths 1`] = `
[
  {
    "code": 7044,
    "message": "Parameter 'num' implicitly has an 'any' type, but a better type may be inferred from usage.",
    "range": {
      "end": {
        "character": 7,
        "line": 3,
      },
      "start": {
        "character": 4,
        "line": 3,
      },
    },
    "severity": 4,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2307,
    "message": "Cannot find module 'hi' or its corresponding type declarations.",
    "range": {
      "end": {
        "character": 23,
        "line": 1,
      },
      "start": {
        "character": 19,
        "line": 1,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'string' is not assignable to type 'number'.",
    "range": {
      "end": {
        "character": 5,
        "line": 6,
      },
      "start": {
        "character": 4,
        "line": 6,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > props-control-flow 1`] = `[]`;

exports[`DiagnosticsProvider > props-untyped 1`] = `[]`;

exports[`DiagnosticsProvider > pug 1`] = `
[
  {
    "code": 2307,
    "message": "Cannot find module '.' or its corresponding type declarations.",
    "range": {
      "end": {
        "character": 22,
        "line": 1,
      },
      "start": {
        "character": 19,
        "line": 1,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2307,
    "message": "Cannot find module '.' or its corresponding type declarations.",
    "range": {
      "end": {
        "character": 30,
        "line": 2,
      },
      "start": {
        "character": 27,
        "line": 2,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string | number'.",
    "range": {
      "end": {
        "character": 10,
        "line": 4,
      },
      "start": {
        "character": 9,
        "line": 4,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > reactive-statement-unused-in-comma-list/ignores-unused-let 1`] = `[]`;

exports[`DiagnosticsProvider > reactive-statement-unused-in-comma-list/keeps-legit-const 1`] = `
[
  {
    "code": 2695,
    "message": "Left side of comma operator is unused and has no side effects.",
    "range": {
      "end": {
        "character": 8,
        "line": 6,
      },
      "start": {
        "character": 7,
        "line": 6,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [
      1,
    ],
  },
  {
    "code": 2695,
    "message": "Left side of comma operator is unused and has no side effects.",
    "range": {
      "end": {
        "character": 11,
        "line": 7,
      },
      "start": {
        "character": 10,
        "line": 7,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [
      1,
    ],
  },
  {
    "code": 2695,
    "message": "Left side of comma operator is unused and has no side effects.",
    "range": {
      "end": {
        "character": 8,
        "line": 8,
      },
      "start": {
        "character": 7,
        "line": 8,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [
      1,
    ],
  },
  {
    "code": 2695,
    "message": "Left side of comma operator is unused and has no side effects.",
    "range": {
      "end": {
        "character": 9,
        "line": 13,
      },
      "start": {
        "character": 8,
        "line": 13,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [
      1,
    ],
  },
]
`;

exports[`DiagnosticsProvider > reactive-statement-unused-in-comma-list/keeps-legit-import 1`] = `
[
  {
    "code": 2307,
    "message": "Cannot find module 'whatever' or its corresponding type declarations.",
    "range": {
      "end": {
        "character": 32,
        "line": 2,
      },
      "start": {
        "character": 22,
        "line": 2,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2695,
    "message": "Left side of comma operator is unused and has no side effects.",
    "range": {
      "end": {
        "character": 8,
        "line": 7,
      },
      "start": {
        "character": 7,
        "line": 7,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [
      1,
    ],
  },
  {
    "code": 2695,
    "message": "Left side of comma operator is unused and has no side effects.",
    "range": {
      "end": {
        "character": 11,
        "line": 8,
      },
      "start": {
        "character": 10,
        "line": 8,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [
      1,
    ],
  },
  {
    "code": 2695,
    "message": "Left side of comma operator is unused and has no side effects.",
    "range": {
      "end": {
        "character": 8,
        "line": 9,
      },
      "start": {
        "character": 7,
        "line": 9,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [
      1,
    ],
  },
  {
    "code": 2695,
    "message": "Left side of comma operator is unused and has no side effects.",
    "range": {
      "end": {
        "character": 9,
        "line": 14,
      },
      "start": {
        "character": 8,
        "line": 14,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [
      1,
    ],
  },
]
`;

exports[`DiagnosticsProvider > reactive-statement-unused-label/ignores-unused-label 1`] = `[]`;

exports[`DiagnosticsProvider > reactive-statement-unused-label/keeps-other-unused-label-warnings 1`] = `
[
  {
    "code": 7028,
    "message": "Unused label.",
    "range": {
      "end": {
        "character": 5,
        "line": 2,
      },
      "start": {
        "character": 4,
        "line": 2,
      },
    },
    "severity": 4,
    "source": "js",
    "tags": [
      1,
    ],
  },
]
`;

exports[`DiagnosticsProvider > script-boolean-not-assignable-to-string 1`] = `
[
  {
    "code": 2322,
    "message": "Type 'boolean' is not assignable to type 'string'.",
    "range": {
      "end": {
        "character": 27,
        "line": 0,
      },
      "start": {
        "character": 24,
        "line": 0,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > slot-typechecks 1`] = `
[
  {
    "code": 2304,
    "message": "Cannot find name 'defaultSlotProp'.",
    "range": {
      "end": {
        "character": 48,
        "line": 4,
      },
      "start": {
        "character": 33,
        "line": 4,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'number' and 'boolean' have no overlap.",
    "range": {
      "end": {
        "character": 28,
        "line": 6,
      },
      "start": {
        "character": 3,
        "line": 6,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'boolean' and 'number' have no overlap.",
    "range": {
      "end": {
        "character": 24,
        "line": 8,
      },
      "start": {
        "character": 5,
        "line": 8,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2304,
    "message": "Cannot find name 'namedSlotProp'.",
    "range": {
      "end": {
        "character": 16,
        "line": 12,
      },
      "start": {
        "character": 3,
        "line": 12,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2339,
    "message": "Property 'd' does not exist on type '{ a: boolean; b: string; }'.",
    "range": {
      "end": {
        "character": 40,
        "line": 13,
      },
      "start": {
        "character": 39,
        "line": 13,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2367,
    "message": "This comparison appears to be unintentional because the types 'boolean' and 'string' have no overlap.",
    "range": {
      "end": {
        "character": 13,
        "line": 16,
      },
      "start": {
        "character": 5,
        "line": 16,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > strictEvents 1`] = `
[
  {
    "code": 2345,
    "message": "Argument of type '"bar"' is not assignable to parameter of type '"click" | "foo"'.",
    "range": {
      "end": {
        "character": 20,
        "line": 7,
      },
      "start": {
        "character": 17,
        "line": 7,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > style-directive 1`] = `
[
  {
    "code": 2345,
    "message": "Argument of type 'boolean' is not assignable to parameter of type 'String | Number'.",
    "range": {
      "end": {
        "character": 16,
        "line": 16,
      },
      "start": {
        "character": 11,
        "line": 16,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2345,
    "message": "Argument of type 'boolean' is not assignable to parameter of type 'String | Number'.",
    "range": {
      "end": {
        "character": 23,
        "line": 17,
      },
      "start": {
        "character": 18,
        "line": 17,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > svelte-element 1`] = `
[
  {
    "code": 2740,
    "message": "Type 'HTMLDivElement' is missing the following properties from type 'HTMLAnchorElement': charset, coords, download, hreflang, and 21 more.",
    "range": {
      "end": {
        "character": 51,
        "line": 22,
      },
      "start": {
        "character": 38,
        "line": 22,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"cellpadding"' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 38,
        "line": 23,
      },
      "start": {
        "character": 27,
        "line": 23,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > svelte-element-error 1`] = `
[
  {
    "code": -1,
    "message": "<svelte:element> must have a 'this' attribute",
    "range": {
      "end": {
        "character": 0,
        "line": 4,
      },
      "start": {
        "character": 0,
        "line": 4,
      },
    },
    "severity": 1,
    "source": "ts",
  },
]
`;

exports[`DiagnosticsProvider > svelte-native 1`] = `
[
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"horizontalalignment"' does not exist in type 'HTMLProps<"label", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 43,
        "line": 1,
      },
      "start": {
        "character": 24,
        "line": 1,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"text"' does not exist in type 'HTMLProps<"span", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 34,
        "line": 3,
      },
      "start": {
        "character": 30,
        "line": 3,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"text"' does not exist in type 'HTMLProps<"span", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 22,
        "line": 4,
      },
      "start": {
        "character": 18,
        "line": 4,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2353,
    "message": "Object literal may only specify known properties, and '"asd"' does not exist in type 'HTMLProps<"div", HTMLAttributes<any>>'.",
    "range": {
      "end": {
        "character": 12,
        "line": 7,
      },
      "start": {
        "character": 9,
        "line": 7,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > svelte-ts-file 1`] = `
[
  {
    "code": 2305,
    "message": "Module '"./foo.svelte"' has no exported member 'bar'.",
    "range": {
      "end": {
        "character": 14,
        "line": 1,
      },
      "start": {
        "character": 11,
        "line": 1,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > sveltekit-autotypings 1`] = `
[
  {
    "code": 2741,
    "message": "Property 'data' is missing in type '{}' but required in type '{ data: { exists: boolean; }; }'.",
    "range": {
      "end": {
        "character": 5,
        "line": 5,
      },
      "start": {
        "character": 1,
        "line": 5,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > sveltekit-autotypings-arrow 1`] = `
[
  {
    "code": 2741,
    "message": "Property 'data' is missing in type '{}' but required in type '{ data: { exists: boolean; }; }'.",
    "range": {
      "end": {
        "character": 5,
        "line": 4,
      },
      "start": {
        "character": 1,
        "line": 4,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > tags-without-attrs 1`] = `[]`;

exports[`DiagnosticsProvider > transition-options 1`] = `[]`;

exports[`DiagnosticsProvider > typechecks-js-with-ts-check 1`] = `
[
  {
    "code": 2339,
    "message": "Property 'bla' does not exist on type '1'.",
    "range": {
      "end": {
        "character": 7,
        "line": 3,
      },
      "start": {
        "character": 4,
        "line": 3,
      },
    },
    "severity": 1,
    "source": "js",
    "tags": [],
  },
]
`;

exports[`DiagnosticsProvider > unInitialized 1`] = `[]`;

exports[`DiagnosticsProvider > undeclared-component 1`] = `
[
  {
    "code": 2304,
    "message": "Cannot find name 'Component'.",
    "range": {
      "end": {
        "character": 10,
        "line": 2,
      },
      "start": {
        "character": 1,
        "line": 2,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
  {
    "code": 2304,
    "message": "Cannot find name 'SomeLongComponentName'.",
    "range": {
      "end": {
        "character": 22,
        "line": 3,
      },
      "start": {
        "character": 1,
        "line": 3,
      },
    },
    "severity": 1,
    "source": "ts",
    "tags": [],
  },
]
`;
